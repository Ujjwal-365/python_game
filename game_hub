import tkinter as tk
from tkinter import messagebox
import random

class MiniGameHub:
    def __init__(self, root):
        self.root = root
        self.root.title("Mini Game Hub")
        
        self.create_widgets()

    def create_widgets(self):
        tk.Label(self.root, text="Welcome to the Mini Game Hub!", font=("Helvetica", 16)).pack(pady=10)
        
        tk.Button(self.root, text="Play WAR", command=self.play_war, width=20).pack(pady=5)
        tk.Button(self.root, text="Play Tic-Tac-Toe", command=self.play_tictactoe, width=20).pack(pady=5)
        tk.Button(self.root, text="Play Stone Paper Scissors", command=self.play_sps, width=20).pack(pady=5)

    def play_war(self):
        self.new_window = tk.Toplevel(self.root)
        WarGame(self.new_window)

    def play_tictactoe(self):
        self.new_window = tk.Toplevel(self.root)
        TicTacToeGame(self.new_window)

    def play_sps(self):
        self.new_window = tk.Toplevel(self.root)
        StonePaperScissorsGame(self.new_window)

class WarGame:
    def __init__(self, root):
        self.root = root
        self.root.title("WAR Game")
        
        tk.Label(self.root, text="Welcome to WAR!", font=("Helvetica", 14)).pack(pady=10)
        
        self.result_label = tk.Label(self.root, text="", font=("Helvetica", 12))
        self.result_label.pack(pady=5)

        tk.Button(self.root, text="Draw Cards", command=self.draw_cards).pack(pady=5)

    def draw_cards(self):
        player_card = random.randint(1, 13)
        computer_card = random.randint(1, 13)
        
        if player_card > computer_card:
            result_text = f"You win! Your card: {player_card}, Computer's card: {computer_card}"
        elif player_card < computer_card:
            result_text = f"You lose! Your card: {player_card}, Computer's card: {computer_card}"
        else:
            result_text = f"It's a tie! Both drew {player_card}"

        self.result_label.config(text=result_text)

class TicTacToeGame:
    def __init__(self, root):
        self.root = root
        self.root.title("Tic-Tac-Toe Game")
        
        self.current_player = "X"
        self.board = [""] * 9
        self.buttons = []

        self.create_widgets()

    def create_widgets(self):
        frame = tk.Frame(self.root)
        frame.pack()

        for i in range(9):
            button = tk.Button(frame, text="", font=("Helvetica", 20), height=3, width=6, command=lambda i=i: self.make_move(i))
            button.grid(row=i//3, column=i%3)
            self.buttons.append(button)

        self.status_label = tk.Label(self.root, text="Player X's turn", font=("Helvetica", 12))
        self.status_label.pack(pady=10)

    def make_move(self, index):
        if not self.board[index]:
            self.board[index] = self.current_player
            self.buttons[index].config(text=self.current_player)
            if self.check_winner():
                messagebox.showinfo("Game Over", f"Player {self.current_player} wins!")
                self.reset_game()
            elif "" not in self.board:
                messagebox.showinfo("Game Over", "It's a tie!")
                self.reset_game()
            else:
                self.current_player = "O" if self.current_player == "X" else "X"
                self.status_label.config(text=f"Player {self.current_player}'s turn")

    def check_winner(self):
        win_conditions = [(0, 1, 2), (3, 4, 5), (6, 7, 8),
                          (0, 3, 6), (1, 4, 7), (2, 5, 8),
                          (0, 4, 8), (2, 4, 6)]
        for condition in win_conditions:
            if self.board[condition[0]] == self.board[condition[1]] == self.board[condition[2]] != "":
                return True
        return False

    def reset_game(self):
        self.board = [""] * 9
        for button in self.buttons:
            button.config(text="")
        self.current_player = "X"
        self.status_label.config(text="Player X's turn")

class StonePaperScissorsGame:
    def __init__(self, root):
        self.root = root
        self.root.title("Stone Paper Scissors Game")
        
        tk.Label(self.root, text="Choose your move:", font=("Helvetica", 14)).pack(pady=10)
        
        self.result_label = tk.Label(self.root, text="", font=("Helvetica", 12))
        self.result_label.pack(pady=5)
        
        tk.Button(self.root, text="Stone", command=lambda: self.play("Stone")).pack(pady=5)
        tk.Button(self.root, text="Paper", command=lambda: self.play("Paper")).pack(pady=5)
        tk.Button(self.root, text="Scissors", command=lambda: self.play("Scissors")).pack(pady=5)

    def play(self, player_choice):
        choices = ["Stone", "Paper", "Scissors"]
        computer_choice = random.choice(choices)
        
        if player_choice == computer_choice:
            result_text = f"It's a tie! Both chose {player_choice}"
        elif (player_choice == "Stone" and computer_choice == "Scissors") or \
             (player_choice == "Paper" and computer_choice == "Stone") or \
             (player_choice == "Scissors" and computer_choice == "Paper"):
            result_text = f"You win! You chose {player_choice}, Computer chose {computer_choice}"
        else:
            result_text = f"You lose! You chose {player_choice}, Computer chose {computer_choice}"
        
        self.result_label.config(text=result_text)

if __name__ == "__main__":
    root = tk.Tk()
    app = MiniGameHub(root)
    root.mainloop()
